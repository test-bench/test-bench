#!/usr/bin/env bash

set -eu -o pipefail

echo
echo "Installing gems locally"
echo "= = ="
echo

ruby_api_version=$(ruby -rrbconfig -e "puts RbConfig::CONFIG['ruby_version']")

if [ -d gems ]; then
  rm -rf gems

  echo "Removed previously installed gems"
  echo
fi

gem_name=$(basename *.gemspec .gemspec)

echo "Gemspec: $gem_name.gemspsec"

gem_info=($(
  gem build $gem_name.gemspec --output install-gems-installation.gem --quiet 2>/dev/null |
    sed -E -n 's/^[[:blank:]]*(Name|Version):[[:blank:]]*(.*)$/\2/p'
))
gem="${gem_info[0]}-${gem_info[1]}"

echo "Gem: $gem"
echo

cmd="gem install --force --no-document --install-dir ./gems/ruby/$ruby_api_version --bindir ./gems/bin --no-user-install --development install-gems-installation.gem"

echo $cmd
($cmd)

echo

rm -vf install-gems-installation.gem

ruby <<RUBY > ./gems/gems_init.rb
puts "# Generated by $0\n\n"
Dir['gems/ruby/$ruby_api_version/gems/*'].each do |dir|
  dir = File.basename(dir)
  next if dir == "$gem"
  puts "\$LOAD_PATH.push(File.join(__dir__, 'ruby', '$ruby_api_version', 'gems', '#{dir}', 'lib'))"
end
RUBY

echo
echo "Wrote ./gems/gems_init.rb"

for bin in ./gems/bin/*; do
  get_bin_path_rb=$(sed --quiet --regexp-extended "s/^load (Gem\.activate_bin_path\('[^']+', '[^']+'), version\)$/\1)/p" $bin)

  get_relative_path_rb="puts Pathname($get_bin_path_rb).relative_path_from(File.expand_path('gems/bin'))"

  relative_path=$(GEM_PATH=./gems/ruby/$ruby_api_version ruby -r rubygems -r pathname -e "$get_relative_path_rb")

  cat > $bin <<TEXT
#!/usr/bin/env ruby
require_relative '../gems_init'
load File.expand_path('$relative_path', __dir__)
TEXT
  chmod 755 $bin

  echo "Wrote executable: $bin"
done

echo
echo "(done)"
echo "- - -"
echo
