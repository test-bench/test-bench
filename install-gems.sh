#!/usr/bin/env bash

set -eEuo pipefail

trap 'printf "\n\e[31mError: Exit Status %s (%s)\e[m\n" $? "$(basename "$0")"' ERR

cd "$(dirname "$0")"

echo
echo "Start ($(basename "$0"))"

get_relative_path() {
  target=$1
  shift

  for source in "$@"; do
    ruby --disable-gems -rpathname -e "puts Pathname('$source').relative_path_from('$target')"
  done
}
export -f get_relative_path

echo
echo "Install Gems"
echo "= = ="

if [ -z "${POSTURE:-}" ]; then
  POSTURE="operational"
  echo "POSTURE is not set. Using \"$POSTURE\" by default."
fi

if [ -z "${RUBYGEMS_PUBLIC_AUTHORITY:-}" ]; then
  RUBYGEMS_PUBLIC_AUTHORITY="https://rubygems.org"
  echo "RUBYGEMS_PUBLIC_AUTHORITY is not set. Using \"$RUBYGEMS_PUBLIC_AUTHORITY\" by default."
fi

if [ -z "${RUBYGEMS_PRIVATE_AUTHORITY:-}" ]; then
  echo "RUBYGEMS_PRIVATE_AUTHORITY is not set. Only the public rubygems authority will be used."
fi

gems_exec_dir="gems/exec"

ruby_engine="$(ruby --disable-gems -e "puts RUBY_ENGINE")"
ruby_api_version="$(ruby --disable-gems -rrbconfig -e "puts RbConfig::CONFIG['ruby_version']")"

gem_path="gems/$ruby_engine/$ruby_api_version"

rubygems_sources="--source \"$RUBYGEMS_PUBLIC_AUTHORITY\""
if [ -n "${RUBYGEMS_PRIVATE_AUTHORITY:-}" ]; then
  rubygems_sources="$rubygems_sources --source \"$RUBYGEMS_PRIVATE_AUTHORITY\""
fi

gemspecs=($(find . -maxdepth 2 -name '*.gemspec' | xargs bash -c 'get_relative_path "." "$@"' _))

echo
echo "Posture: $POSTURE"
echo "Gem Path: $gem_path"
echo "Gem Executables Dir: $gems_exec_dir"
echo "Rubygems Sources: $rubygems_sources"
echo
echo "Gemspecs:"
printf -- "- %s\n" "${gemspecs[@]}"

echo
echo "Removing previously installed gems"
echo "- - -"

cmd="rm -rf gems"
echo "$cmd"
eval "$cmd"

echo
echo "Building local gems"
echo "- - -"

mkdir -p "gems/tmp"

for gemspec in "${gemspecs[@]}"; do
  echo
  echo "Gemspec: $gemspec"
  gem build --quiet --force --output "gems/tmp/$(basename -s .gemspec $gemspec).gem" "$gemspec"
done

local_gems=($(basename -s .gem gems/tmp/*.gem))

echo
echo "Installing local gem dependencies"
echo "- - -"

export GEM_HOME="$(realpath .)/$gem_path"

cmd="gem install --clear-sources $rubygems_sources --no-user-install --install-dir $gem_path --bindir gems/exec --no-wrappers"
if [ "$POSTURE" != "operational" ]; then
  cmd="$cmd --development"
else
  cmd="$cmd"
fi
cmd="$cmd gems/tmp/*.gem"
echo "$cmd"
eval "$cmd"

echo
cmd="gem uninstall --force --executables --bindir gems/exec --no-user-install ${local_gems[@]}"
echo "$cmd"
eval "$cmd"

echo
rm -rvf gems/tmp

echo
echo "Generating executables"
echo "- - -"

mkdir -p gems/exec

executables=($(find "$gems_exec_dir" -type l -perm 755))

if [ ${#executables[@]} -eq 0 ]; then
  echo "(No executables)"
fi

for executable in "${executables[@]}"; do
  relative_bundle_setup="$(get_relative_path "$gems_exec_dir" gems/lib/bundle/setup.rb)"
  relative_executable="$(get_relative_path "$(realpath "$gems_exec_dir")" "$(readlink -f "$executable" || true)")"

  rm "$executable"

  cat > "$executable" <<RUBY
#!/usr/bin/env ruby
# Generated by $0
require_relative '$relative_bundle_setup'
load File.expand_path('$relative_executable', __dir__)
RUBY

  chmod 755 "$executable"

  echo "$executable => $relative_executable"
done

echo
echo "Generating bundle/setup"
echo "- - -"

bundle_setup_rb="gems/lib/bundle/setup.rb"

mkdir -p "$(dirname "$bundle_setup_rb")"

ruby -rpp -rpathname -rrubygems >"$bundle_setup_rb" <<RUBY
gem_home = '$GEM_HOME'


puts <<~INNER_RUBY
# Generated by $0

require 'rbconfig'

if RUBY_ENGINE != '$ruby_engine'
  abort "RUBY_ENGINE is '\#{RUBY_ENGINE}', but gems were installed for '$ruby_engine'"
end

ruby_api_version = RbConfig::CONFIG['ruby_version']
if ruby_api_version != '$ruby_api_version'
  abort "Ruby API version is \#{ruby_api_version}, but gems were installed for API version $ruby_api_version"
end

[
INNER_RUBY


bundle_setup_dir = File.expand_path(File.dirname('$bundle_setup_rb'), __dir__)

[$(printf '"%s", ' "${gemspecs[@]}")].each do |gemspec|
  gem_specification = Gem::Specification.load(gemspec)

  gem_specification.require_paths.each do |require_path|
    require_path = File.expand_path("../#{require_path}", gemspec)

    relative_require_path = Pathname(require_path).relative_path_from(bundle_setup_dir).to_s

    puts "  '#{relative_require_path}',"
  end
end


puts <<~INNER_RUBY
].each do |local_load_path|
  load_path = File.expand_path(local_load_path, __dir__)

  if not \$LOAD_PATH.include?(load_path)
    \$LOAD_PATH.unshift(load_path)
  end
end
INNER_RUBY


gem_load_paths = []

specifications_dir = File.join(gem_home, 'specifications')
Gem::Specification.each_spec([specifications_dir]) do |spec|
  spec.full_require_paths.each do |full_gem_load_path|
    gem_load_path = Pathname(full_gem_load_path).relative_path_from(gem_home).to_s
    gem_load_paths << gem_load_path
  end
end

if not gem_load_paths.empty?
  relative_gem_path_base = Pathname(File.expand_path("gems/#{RUBY_ENGINE}/$ruby_api_version")).relative_path_from(bundle_setup_dir)


  puts <<~INNER_RUBY

  gem_path_base = File.expand_path('#{relative_gem_path_base}', __dir__)

  [
  INNER_RUBY


  gem_load_paths.each do |gem_load_path|
    puts "  '#{gem_load_path}',"
  end


  puts <<~INNER_RUBY
  ].each do |gem_path|
    gem_path = File.expand_path(gem_path, gem_path_base)

    if not \$LOAD_PATH.include?(gem_path)
      \$LOAD_PATH.unshift(gem_path)
    end
  end
  INNER_RUBY


end
RUBY


echo "Ruby API Version: $ruby_api_version"
echo "Ruby Engine: $ruby_engine"

echo
echo "Done ($(basename "$0"))"
